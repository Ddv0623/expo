{"version":3,"file":"NativeModules.js","sourceRoot":"","sources":["../../src/proxies/NativeModules.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,gBAAgB,CAAC;AAEtD,MAAM,eAAe,GAAgB,IAAI,GAAG,CAAC;IAC3C;;;OAGG;IACH,gBAAgB;IAChB,eAAe;IACf,2BAA2B;IAC3B,sBAAsB;IACtB;;OAEG;IACH,iBAAiB;IACjB,sBAAsB;IACtB,0BAA0B;IAC1B,iBAAiB;IACjB,mBAAmB;IACnB,sBAAsB;IACtB,qBAAqB;IACrB;;;;OAIG;IACH,gBAAgB;IAChB,eAAe;IACf,sBAAsB;IACtB,QAAQ;IACR,gBAAgB;IAChB,UAAU;IACV,SAAS;IACT,UAAU;CACX,CAAC,CAAC;AACH,MAAM,qBAAqB,GAAgB,IAAI,GAAG,EAAE,CAAC;AAErD,IAAI,yBAAyB,GAAgB,IAAI,GAAG,EAAE,CAAC;AACvD,IAAI,OAAO,GAAG,IAAI,CAAC;AAEnB,SAAS,gCAAgC,CAAC,UAAkB;IAC1D,OAAO,yDAAyD,UAAU;+BAC7C,UAAU,wJAAwJ,CAAC;AAClM,CAAC;AAED,SAAS,qCAAqC,CAAC,UAAkB;IAC/D,OAAO,yDAAyD,UAAU;;iGAEqB,CAAC;AAClG,CAAC;AAED,MAAM,UAAU,2BAA2B,CAAC,aAAkB;IAC5D,IAAI,CAAC,OAAO,EAAE;QACZ,OAAO,aAAa,CAAC;KACtB;IACD,OAAO,IAAI,KAAK,CAAC,aAAa,EAAE;QAC9B,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ;YACxB,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;YAClD,IACE,OAAO;gBACP,OAAO,IAAI,KAAK,QAAQ;gBACxB,CAAC,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,CAAC;gBACvC,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC;gBAC1B,CAAC,yBAAyB,CAAC,GAAG,CAAC,IAAI,CAAC;gBACpC,CAAC,qBAAqB,CAAC,GAAG,CAAC,IAAI,CAAC,EAChC;gBACA,qBAAqB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAEhC,MAAM,sBAAsB,GAC1B,MAAM,CAAC,WAAW,EAAE,kBAAkB,EAAE,gBAAgB,CAAC,iBAAiB;oBACxE,EAAE,oBAAoB,KAAK,oBAAoB,CAAC,WAAW;oBAC7D,MAAM,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,iBAAiB,EAAE,oBAAoB;wBACnF,oBAAoB,CAAC,WAAW,CAAC;gBACrC,IAAI,sBAAsB,EAAE;oBAC1B,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,IAAI,CAAC,CAAC,CAAC;iBACzD;qBAAM,IAAI,MAAM,CAAC,aAAa,EAAE;oBAC/B,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,IAAI,CAAC,CAAC,CAAC;iBAC9D;aACF;YACD,OAAO,KAAK,CAAC;QACf,CAAC;KACF,CAAC,CAAC;AACL,CAAC;AAED;;;;;;;;GAQG;AACH,MAAM,UAAU,gCAAgC,CAAC,WAA+B;IAC9E,IAAI,WAAW,EAAE;QACf,yBAAyB;YACvB,OAAO,WAAW,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,WAAW,CAAC,CAAC;QAClF,OAAO,GAAG,IAAI,CAAC;KAChB;SAAM;QACL,OAAO,GAAG,KAAK,CAAC;KACjB;AACH,CAAC","sourcesContent":["import { ExecutionEnvironment } from 'expo-constants';\n\nconst PROPS_TO_IGNORE: Set<string> = new Set([\n  /**\n   * We don't want to throw when the expo or expo-modules-core packages try to access any of these\n   * modules, since they have built-in fallbacks.\n   */\n  'DevLoadingView',\n  'EXDevLauncher',\n  'EXReactNativeEventEmitter',\n  'NativeUnimoduleProxy',\n  /**\n   * Other modules that are accessed via packages in the Expo SDK but have built-in fallbacks\n   */\n  'ExpoImageModule',\n  'PlatformLocalStorage',\n  'RNC_AsyncSQLiteDBStorage',\n  'RNCAsyncStorage',\n  'RNGetRandomValues',\n  'RNVectorIconsManager',\n  'RNVectorIconsModule',\n  /**\n   * Other methods that can be called on the NativeModules object that we should ignore. The\n   * underlying NativeModules object is sometimes a proxy itself so may not have these methods\n   * defined.\n   */\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toJSON',\n  'toLocaleString',\n  'toString',\n  'valueOf',\n  '$$typeof',\n]);\nconst alreadyErroredModules: Set<string> = new Set();\n\nlet additionalModulesToIgnore: Set<string> = new Set();\nlet enabled = true;\n\nfunction createErrorMessageForStoreClient(moduleName: string) {\n  return `Your JavaScript code tried to access a native module, ${moduleName}, that isn't supported in Expo Go.\nTo continue development with ${moduleName}, you need to create a development build of your app. See https://expo.fyi/missing-native-module for more info, including how to disable these errors.`;\n}\n\nfunction createErrorMessageForDevelopmentBuild(moduleName: string) {\n  return `Your JavaScript code tried to access a native module, ${moduleName}, that doesn't exist in this development build.\nMake sure you are using the newest available development build of this app and running a compatible version of your JavaScript code. If you've installed a new library recently, you may need to make a new development build.\nSee https://expo.fyi/missing-native-module for more info, including how to disable these errors.`;\n}\n\nexport function createProxyForNativeModules(NativeModules: any) {\n  if (!__DEV__) {\n    return NativeModules;\n  }\n  return new Proxy(NativeModules, {\n    get(target, prop, receiver) {\n      const value = Reflect.get(target, prop, receiver);\n      if (\n        enabled &&\n        typeof prop !== 'symbol' &&\n        (value === null || value === undefined) &&\n        !PROPS_TO_IGNORE.has(prop) &&\n        !additionalModulesToIgnore.has(prop) &&\n        !alreadyErroredModules.has(prop)\n      ) {\n        alreadyErroredModules.add(prop);\n\n        const isRunningInStoreClient =\n          global.ExpoModules?.NativeModulesProxy?.modulesConstants.ExponentConstants\n            ?.executionEnvironment === ExecutionEnvironment.StoreClient ||\n          target.NativeUnimoduleProxy?.modulesConstants.ExponentConstants?.executionEnvironment ===\n            ExecutionEnvironment.StoreClient;\n        if (isRunningInStoreClient) {\n          throw new Error(createErrorMessageForStoreClient(prop));\n        } else if (target.EXDevLauncher) {\n          throw new Error(createErrorMessageForDevelopmentBuild(prop));\n        }\n      }\n      return value;\n    },\n  });\n}\n\n/**\n * Disable the error thrown when trying to access a native module that doesn't exist in the host\n * runtime. If a module name or array of module names is provided, this method disables the error\n * for only those modules, erasing a previous setting if one exists. If no parameter is provided,\n * this method disables the error for all modules.\n *\n * @param moduleNames Name of module or modules for which to disable the missing native module\n * error. If this parameter is omitted, the error will be disabled globally.\n */\nexport function disableMissingNativeModuleErrors(moduleNames?: string[] | string) {\n  if (moduleNames) {\n    additionalModulesToIgnore =\n      typeof moduleNames === 'string' ? new Set([moduleNames]) : new Set(moduleNames);\n    enabled = true;\n  } else {\n    enabled = false;\n  }\n}\n"]}