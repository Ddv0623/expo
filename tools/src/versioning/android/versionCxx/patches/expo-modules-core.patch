diff --git a/packages/expo-modules-core/android/CMakeLists.txt b/packages/expo-modules-core/android/CMakeLists.txt
index d710ce4f8f..305e29f6c4 100644
--- a/packages/expo-modules-core/android/CMakeLists.txt
+++ b/packages/expo-modules-core/android/CMakeLists.txt
@@ -3,7 +3,7 @@ cmake_minimum_required(VERSION 3.4.1)
 set(CMAKE_VERBOSE_MAKEFILE ON)
 set(CMAKE_ANDROID_STL_TYPE c++_shared)
 set(CMAKE_CXX_STANDARD 17)
-set(PACKAGE_NAME "expo-modules-core")
+set(PACKAGE_NAME "expo-modules-core_{VERSIONED_ABI_NAME}")
 set(BUILD_DIR ${CMAKE_SOURCE_DIR}/build)
 
 if (${NATIVE_DEBUG})
@@ -61,14 +61,14 @@ find_library(LOG_LIB log)
 if(${REACT_NATIVE_TARGET_VERSION} LESS 69)
     find_library(
         FOLLY_LIB
-        folly_json
+        folly_json_{VERSIONED_ABI_NAME}
         PATHS ${LIBRN_DIR}
         NO_CMAKE_FIND_ROOT_PATH
     )
 else()
     find_library(
         FOLLY_LIB
-        folly_runtime
+        folly_runtime_{VERSIONED_ABI_NAME}
         PATHS ${LIBRN_DIR}
         NO_CMAKE_FIND_ROOT_PATH
     )
@@ -83,35 +83,35 @@ find_library(
 
 find_library(
         JSI_LIB
-        jsi
+        jsi_{VERSIONED_ABI_NAME}
         PATHS ${LIBRN_DIR}
         NO_CMAKE_FIND_ROOT_PATH
 )
 
 find_library(
         REACT_NATIVE_JNI_LIB
-        reactnativejni
+        reactnativejni_{VERSIONED_ABI_NAME}
         PATHS ${LIBRN_DIR}
         NO_CMAKE_FIND_ROOT_PATH
 )
 
 find_library(
         REACT_NATIVE_MODULES_CORE
-        react_nativemodule_core
+        react_nativemodule_core_{VERSIONED_ABI_NAME}
         PATHS ${LIBRN_DIR}
         NO_CMAKE_FIND_ROOT_PATH
 )
 
 find_library(
         HERMES_LIB
-        hermes
+        hermes_{VERSIONED_ABI_NAME}
         PATHS ${HERMES_SO_DIR}
         NO_CMAKE_FIND_ROOT_PATH
 )
 
 find_library(
         JSEXECUTOR_LIB
-        jscexecutor
+        jscexecutor_{VERSIONED_ABI_NAME}
         PATHS ${LIBRN_DIR}
         NO_CMAKE_FIND_ROOT_PATH
 )
diff --git a/packages/expo-modules-core/android/build.gradle b/packages/expo-modules-core/android/build.gradle
index 2a9aecc5ee..ee62584679 100644
--- a/packages/expo-modules-core/android/build.gradle
+++ b/packages/expo-modules-core/android/build.gradle
@@ -55,6 +55,10 @@ def REACT_NATIVE_DIR = REACT_NATIVE_BUILD_FROM_SOURCE
 def REACT_NATIVE_SO_DIR = REACT_NATIVE_BUILD_FROM_SOURCE
   ? Paths.get(findProject(":ReactAndroid").getProjectDir().toString(), "build", "intermediates", "library_*", "*", "jni")
   : "${buildDir}/react-native-0*/jni"
+REACT_NATIVE_DIR = "${rootDir}/versioned-react-native"
+REACT_NATIVE_BUILD_FROM_SOURCE = false
+REACT_NATIVE_SO_DIR = "${buildDir}/reactandroid-{VERSIONED_ABI_NAME}-*/jni"
+def REACT_NATIVE_AAR_DIR = "${rootDir}/versioned-abis/expoview-{VERSIONED_ABI_NAME}/maven"
 
 def reactProperties = new Properties()
 file("$REACT_NATIVE_DIR/ReactAndroid/gradle.properties").withInputStream { reactProperties.load(it) }
@@ -290,7 +294,7 @@ task createNativeDepsDirectories() {
 // JNI
 def extractReactNativeAAR = { buildType ->
   def suffix = buildType == 'Debug' ? '-debug' : '-release'
-  def rnAARs = fileTree(REACT_NATIVE_DIR).matching { include "**/react-native/**/*${suffix}.aar" }
+  def rnAARs = fileTree(REACT_NATIVE_AAR_DIR).matching { include "**/*.aar" }
   if (rnAARs.isEmpty()) {
     rnAARs = fileTree(REACT_NATIVE_DIR).matching { include "**/react-native/**/*.aar" }
   }
diff --git a/packages/expo-modules-core/android/src/main/cpp/CachedReferencesRegistry.cpp b/packages/expo-modules-core/android/src/main/cpp/CachedReferencesRegistry.cpp
index 6a92150cef..c656ead0e1 100644
--- a/packages/expo-modules-core/android/src/main/cpp/CachedReferencesRegistry.cpp
+++ b/packages/expo-modules-core/android/src/main/cpp/CachedReferencesRegistry.cpp
@@ -19,8 +19,8 @@ void CachedReferencesRegistry::loadJClasses(JNIEnv *env) {
     {"<init>", "(Z)V"}
   });
 
-  loadJClass(env, "com/facebook/react/bridge/PromiseImpl", {
-    {"<init>", "(Lcom/facebook/react/bridge/Callback;Lcom/facebook/react/bridge/Callback;)V"}
+  loadJClass(env, "{VERSIONED_ABI_NAME}/com/facebook/react/bridge/PromiseImpl", {
+    {"<init>", "(L{VERSIONED_ABI_NAME}/com/facebook/react/bridge/Callback;L{VERSIONED_ABI_NAME}/com/facebook/react/bridge/Callback;)V"}
   });
 
   loadJClass(env, "java/lang/Object", {});
diff --git a/packages/expo-modules-core/android/src/main/cpp/Exceptions.h b/packages/expo-modules-core/android/src/main/cpp/Exceptions.h
index 3565306601..f1773f0ae3 100644
--- a/packages/expo-modules-core/android/src/main/cpp/Exceptions.h
+++ b/packages/expo-modules-core/android/src/main/cpp/Exceptions.h
@@ -17,7 +17,7 @@ namespace expo {
  */
 class CodedException : public jni::JavaClass<CodedException, jni::JThrowable> {
 public:
-  static auto constexpr kJavaDescriptor = "Lexpo/modules/kotlin/exception/CodedException;";
+  static auto constexpr kJavaDescriptor = "L{VERSIONED_ABI_NAME}/expo/modules/kotlin/exception/CodedException;";
 
   static jni::local_ref<CodedException> create(const std::string &message);
 };
@@ -28,7 +28,7 @@ public:
 class JavaScriptEvaluateException
   : public jni::JavaClass<JavaScriptEvaluateException, CodedException> {
 public:
-  static auto constexpr kJavaDescriptor = "Lexpo/modules/kotlin/exception/JavaScriptEvaluateException;";
+  static auto constexpr kJavaDescriptor = "L{VERSIONED_ABI_NAME}/expo/modules/kotlin/exception/JavaScriptEvaluateException;";
 
   static jni::local_ref<JavaScriptEvaluateException> create(
     const std::string &message,
diff --git a/packages/expo-modules-core/android/src/main/cpp/JNIFunctionBody.cpp b/packages/expo-modules-core/android/src/main/cpp/JNIFunctionBody.cpp
index d9ac4a3361..61c6d766bd 100644
--- a/packages/expo-modules-core/android/src/main/cpp/JNIFunctionBody.cpp
+++ b/packages/expo-modules-core/android/src/main/cpp/JNIFunctionBody.cpp
@@ -14,10 +14,10 @@ JNIFunctionBody::invoke(jobjectArray args) {
   // Because of that, it can't be cached - we will try to invoke the nonexistent method
   // if we receive an object of a different class than the one used to obtain the method id.
   // The only cacheable method id can be obtain from the base class.
-  static const auto method = jni::findClassLocal("expo/modules/kotlin/jni/JNIFunctionBody")
+  static const auto method = jni::findClassLocal("{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/JNIFunctionBody")
     ->getMethod<jni::local_ref<react::ReadableNativeArray::javaobject>(jobjectArray)>(
       "invoke",
-      "([Ljava/lang/Object;)Lcom/facebook/react/bridge/ReadableNativeArray;"
+      "([Ljava/lang/Object;)L{VERSIONED_ABI_NAME}/com/facebook/react/bridge/ReadableNativeArray;"
     );
 
   return method(this->self(), args);
@@ -32,7 +32,7 @@ void JNIAsyncFunctionBody::invoke(
   // Because of that, it can't be cached - we will try to invoke the nonexistent method
   // if we receive an object of a different class than the one used to obtain the method id.
   // The only cacheable method id can be obtain from the base class.
-  static const auto method = jni::findClassLocal("expo/modules/kotlin/jni/JNIAsyncFunctionBody")
+  static const auto method = jni::findClassLocal("{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/JNIAsyncFunctionBody")
     ->getMethod<
       void(jobjectArray , jobject)
     >(
diff --git a/packages/expo-modules-core/android/src/main/cpp/JNIFunctionBody.h b/packages/expo-modules-core/android/src/main/cpp/JNIFunctionBody.h
index 9125e980ee..d0bb26ac53 100644
--- a/packages/expo-modules-core/android/src/main/cpp/JNIFunctionBody.h
+++ b/packages/expo-modules-core/android/src/main/cpp/JNIFunctionBody.h
@@ -15,7 +15,7 @@ namespace expo {
  */
 class JNIFunctionBody : public jni::JavaClass<JNIFunctionBody> {
 public:
-  static auto constexpr kJavaDescriptor = "Lexpo/modules/kotlin/jni/JNIFunctionBody;";
+  static auto constexpr kJavaDescriptor = "L{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/JNIFunctionBody;";
 
   /**
    * Invokes a Kotlin's implementation of this function.
@@ -34,7 +34,7 @@ public:
  */
 class JNIAsyncFunctionBody : public jni::JavaClass<JNIAsyncFunctionBody> {
 public:
-  static auto constexpr kJavaDescriptor = "Lexpo/modules/kotlin/jni/JNIAsyncFunctionBody;";
+  static auto constexpr kJavaDescriptor = "L{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/JNIAsyncFunctionBody;";
 
   /**
    * Invokes a Kotlin's implementation of this async function.
diff --git a/packages/expo-modules-core/android/src/main/cpp/JSIInteropModuleRegistry.h b/packages/expo-modules-core/android/src/main/cpp/JSIInteropModuleRegistry.h
index 32fbabd146..f249eb6017 100644
--- a/packages/expo-modules-core/android/src/main/cpp/JSIInteropModuleRegistry.h
+++ b/packages/expo-modules-core/android/src/main/cpp/JSIInteropModuleRegistry.h
@@ -25,7 +25,7 @@ namespace expo {
 class JSIInteropModuleRegistry : public jni::HybridClass<JSIInteropModuleRegistry> {
 public:
   static auto constexpr
-    kJavaDescriptor = "Lexpo/modules/kotlin/jni/JSIInteropModuleRegistry;";
+    kJavaDescriptor = "L{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/JSIInteropModuleRegistry;";
   static auto constexpr TAG = "JSIInteropModuleRegistry";
 
   static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jhybridobject> jThis);
diff --git a/packages/expo-modules-core/android/src/main/cpp/JavaScriptModuleObject.h b/packages/expo-modules-core/android/src/main/cpp/JavaScriptModuleObject.h
index 994df84423..700d19f4e3 100644
--- a/packages/expo-modules-core/android/src/main/cpp/JavaScriptModuleObject.h
+++ b/packages/expo-modules-core/android/src/main/cpp/JavaScriptModuleObject.h
@@ -28,7 +28,7 @@ class JSIInteropModuleRegistry;
 class JavaScriptModuleObject : public jni::HybridClass<JavaScriptModuleObject> {
 public:
   static auto constexpr
-    kJavaDescriptor = "Lexpo/modules/kotlin/jni/JavaScriptModuleObject;";
+    kJavaDescriptor = "L{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/JavaScriptModuleObject;";
   static auto constexpr TAG = "JavaScriptModuleObject";
 
   static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jhybridobject> jThis);
diff --git a/packages/expo-modules-core/android/src/main/cpp/JavaScriptObject.h b/packages/expo-modules-core/android/src/main/cpp/JavaScriptObject.h
index 1a4bd3fdb2..4173fb0849 100644
--- a/packages/expo-modules-core/android/src/main/cpp/JavaScriptObject.h
+++ b/packages/expo-modules-core/android/src/main/cpp/JavaScriptObject.h
@@ -25,7 +25,7 @@ class JavaScriptRuntime;
 class JavaScriptObject : public jni::HybridClass<JavaScriptObject>, JSIObjectWrapper {
 public:
   static auto constexpr
-    kJavaDescriptor = "Lexpo/modules/kotlin/jni/JavaScriptObject;";
+    kJavaDescriptor = "L{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/JavaScriptObject;";
   static auto constexpr TAG = "JavaScriptObject";
 
   static void registerNatives();
diff --git a/packages/expo-modules-core/android/src/main/cpp/JavaScriptValue.h b/packages/expo-modules-core/android/src/main/cpp/JavaScriptValue.h
index 1f016714bc..b501cd8faa 100644
--- a/packages/expo-modules-core/android/src/main/cpp/JavaScriptValue.h
+++ b/packages/expo-modules-core/android/src/main/cpp/JavaScriptValue.h
@@ -23,7 +23,7 @@ class JavaScriptObject;
 class JavaScriptValue : public jni::HybridClass<JavaScriptValue>, JSIValueWrapper {
 public:
   static auto constexpr
-    kJavaDescriptor = "Lexpo/modules/kotlin/jni/JavaScriptValue;";
+    kJavaDescriptor = "L{VERSIONED_ABI_NAME}/expo/modules/kotlin/jni/JavaScriptValue;";
   static auto constexpr TAG = "JavaScriptValue";
 
   static void registerNatives();
diff --git a/packages/expo-modules-core/android/src/main/cpp/MethodMetadata.cpp b/packages/expo-modules-core/android/src/main/cpp/MethodMetadata.cpp
index 60e89e24f3..0875510097 100644
--- a/packages/expo-modules-core/android/src/main/cpp/MethodMetadata.cpp
+++ b/packages/expo-modules-core/android/src/main/cpp/MethodMetadata.cpp
@@ -321,10 +321,10 @@ jsi::Function MethodMetadata::createPromiseBody(
       JNIEnv *env = jni::Environment::current();
 
       auto &jPromise = CachedReferencesRegistry::instance()->getJClass(
-        "com/facebook/react/bridge/PromiseImpl");
+        "{VERSIONED_ABI_NAME}/com/facebook/react/bridge/PromiseImpl");
       jmethodID jPromiseConstructor = jPromise.getMethod(
         "<init>",
-        "(Lcom/facebook/react/bridge/Callback;Lcom/facebook/react/bridge/Callback;)V"
+        "(L{VERSIONED_ABI_NAME}/com/facebook/react/bridge/Callback;L{VERSIONED_ABI_NAME}/com/facebook/react/bridge/Callback;)V"
       );
 
       // Creates a promise object
