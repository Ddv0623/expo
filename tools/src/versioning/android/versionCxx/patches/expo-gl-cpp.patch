diff --git a/packages/expo-gl-cpp/android/build.gradle b/packages/expo-gl-cpp/android/build.gradle
index e144ff2f21..c93b42466a 100644
--- a/packages/expo-gl-cpp/android/build.gradle
+++ b/packages/expo-gl-cpp/android/build.gradle
@@ -13,6 +13,10 @@ def RN_SO_DIR = RN_BUILD_FROM_SOURCE
     ? Paths.get(findProject(":ReactAndroid").getProjectDir().toString(), "build", "intermediates", "library_*", "*", "jni")
     : "${buildDir}/react-native-0*/jni"
 def RN_AAR_DIR = "${REACT_NATIVE_DIR}/android"
+REACT_NATIVE_DIR = "${rootDir}/versioned-react-native"
+RN_BUILD_FROM_SOURCE = false
+RN_SO_DIR = "${buildDir}/reactandroid-{VERSIONED_ABI_NAME}-*/jni"
+RN_AAR_DIR = "${rootDir}/versioned-abis/expoview-{VERSIONED_ABI_NAME}/maven"
 def reactNativeArchitectures() {
     def value = project.getProperties().get("reactNativeArchitectures")
     return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
@@ -138,7 +142,7 @@ dependencies {
 
 def extractReactNativeAAR = { buildType ->
   def suffix = buildType == 'Debug' ? '-debug' : '-release'
-  def rnAARs = fileTree(RN_AAR_DIR).matching { include "**/react-native/**/*${suffix}.aar" }
+  def rnAARs = fileTree(RN_AAR_DIR).matching { include "**/*.aar" }
   if (rnAARs.isEmpty()) {
     rnAARs = fileTree(RN_AAR_DIR).matching { include "**/react-native/**/*.aar" }
   }
diff --git a/packages/expo-gl-cpp/cpp/CMakeLists.txt b/packages/expo-gl-cpp/cpp/CMakeLists.txt
index 2c6948421c..eacc32ce19 100644
--- a/packages/expo-gl-cpp/cpp/CMakeLists.txt
+++ b/packages/expo-gl-cpp/cpp/CMakeLists.txt
@@ -5,7 +5,7 @@ set(CMAKE_ANDROID_STL_TYPE c++_shared)
 set(CMAKE_VERBOSE_MAKEFILE ON)
 set(CMAKE_CXX_STANDARD 17)
 
-set(PACKAGE_NAME "expo-gl")
+set(PACKAGE_NAME "expo-gl_{VERSIONED_ABI_NAME}")
 set(BUILD_DIR ${CMAKE_SOURCE_DIR}/build)
 
 add_library(
@@ -38,7 +38,7 @@ target_include_directories(${PACKAGE_NAME}
                            PRIVATE "${REACT_NATIVE_DIR}/ReactCommon/jsi")
 
 find_library(
-    JSI_LIB jsi
+    JSI_LIB jsi_{VERSIONED_ABI_NAME}
     PATHS ${LIBRN_DIR}
     NO_CMAKE_FIND_ROOT_PATH)
 
diff --git a/packages/expo-gl-cpp/cpp/EXGLJniApi.cpp b/packages/expo-gl-cpp/cpp/EXGLJniApi.cpp
index 9d554969df..405fa2b067 100644
--- a/packages/expo-gl-cpp/cpp/EXGLJniApi.cpp
+++ b/packages/expo-gl-cpp/cpp/EXGLJniApi.cpp
@@ -15,13 +15,13 @@ extern "C" {
 thread_local JNIEnv* threadLocalEnv;
 
 JNIEXPORT jint JNICALL
-Java_expo_modules_gl_cpp_EXGL_EXGLContextCreate
+Java_{VERSIONED_ABI_NAME_JNI_ESCAPED}_expo_modules_gl_cpp_EXGL_EXGLContextCreate
 (JNIEnv *env, jclass clazz) {
   return EXGLContextCreate();
 }
 
 JNIEXPORT void JNICALL
-Java_expo_modules_gl_cpp_EXGL_EXGLContextPrepare
+Java_{VERSIONED_ABI_NAME_JNI_ESCAPED}_expo_modules_gl_cpp_EXGL_EXGLContextPrepare
 (JNIEnv *env, jclass clazz, jlong jsiPtr, jint exglCtxId, jobject glContext) {
   threadLocalEnv = env;
   jclass GLContextClass = env->GetObjectClass(glContext);
@@ -35,55 +35,55 @@ Java_expo_modules_gl_cpp_EXGL_EXGLContextPrepare
 }
 
 JNIEXPORT void JNICALL
-Java_expo_modules_gl_cpp_EXGL_EXGLContextDestroy
+Java_{VERSIONED_ABI_NAME_JNI_ESCAPED}_expo_modules_gl_cpp_EXGL_EXGLContextDestroy
 (JNIEnv *env, jclass clazz, jint exglCtxId) {
   EXGLContextDestroy(exglCtxId);
 }
 
 JNIEXPORT void JNICALL
-Java_expo_modules_gl_cpp_EXGL_EXGLContextFlush
+Java_{VERSIONED_ABI_NAME_JNI_ESCAPED}_expo_modules_gl_cpp_EXGL_EXGLContextFlush
 (JNIEnv *env, jclass clazz, jint exglCtxId) {
   EXGLContextFlush(exglCtxId);
 }
 
 JNIEXPORT jint JNICALL
-Java_expo_modules_gl_cpp_EXGL_EXGLContextCreateObject
+Java_{VERSIONED_ABI_NAME_JNI_ESCAPED}_expo_modules_gl_cpp_EXGL_EXGLContextCreateObject
 (JNIEnv *env, jclass clazz, jint exglCtxId) {
   return EXGLContextCreateObject(exglCtxId);
 }
 
 JNIEXPORT void JNICALL
-Java_expo_modules_gl_cpp_EXGL_EXGLContextDestroyObject
+Java_{VERSIONED_ABI_NAME_JNI_ESCAPED}_expo_modules_gl_cpp_EXGL_EXGLContextDestroyObject
 (JNIEnv *env, jclass clazz, jint exglCtxId, jint exglObjId) {
   EXGLContextDestroyObject(exglCtxId, exglObjId);
 }
 
 JNIEXPORT void JNICALL
-Java_expo_modules_gl_cpp_EXGL_EXGLContextMapObject
+Java_{VERSIONED_ABI_NAME_JNI_ESCAPED}_expo_modules_gl_cpp_EXGL_EXGLContextMapObject
 (JNIEnv *env, jclass clazz, jint exglCtxId, jint exglObjId, jint glObj) {
   EXGLContextMapObject(exglCtxId, exglObjId, glObj);
 }
 
 JNIEXPORT jint JNICALL
-Java_expo_modules_gl_cpp_EXGL_EXGLContextGetObject
+Java_{VERSIONED_ABI_NAME_JNI_ESCAPED}_expo_modules_gl_cpp_EXGL_EXGLContextGetObject
 (JNIEnv *env, jclass clazz, jint exglCtxId, jint exglObjId) {
   return EXGLContextGetObject(exglCtxId, exglObjId);
 }
 
 JNIEXPORT void JNICALL
-Java_expo_modules_gl_cpp_EXGL_EXGLRegisterThread
+Java_{VERSIONED_ABI_NAME_JNI_ESCAPED}_expo_modules_gl_cpp_EXGL_EXGLRegisterThread
 (JNIEnv *env, jclass clazz) {
   threadLocalEnv = env;
 }
 
 JNIEXPORT bool JNICALL
-Java_expo_modules_gl_cpp_EXGL_EXGLContextNeedsRedraw
+Java_{VERSIONED_ABI_NAME_JNI_ESCAPED}_expo_modules_gl_cpp_EXGL_EXGLContextNeedsRedraw
 (JNIEnv *env, jclass clazz, jint exglCtxId) {
   return EXGLContextNeedsRedraw(exglCtxId);
 }
 
 JNIEXPORT void JNICALL
-Java_expo_modules_gl_cpp_EXGL_EXGLContextDrawEnded
+Java_{VERSIONED_ABI_NAME_JNI_ESCAPED}_expo_modules_gl_cpp_EXGL_EXGLContextDrawEnded
 (JNIEnv *env, jclass clazz, jint exglCtxId) {
   EXGLContextDrawEnded(exglCtxId);
 }
